一：jvm的堆区对象分配规则
    1.1：对象优先在新生代（Eden区）分配
    1.2：大对象直接进入老年代（-XX:PretenureSizeThreshold=3145728 这个参数来定义多大的对象直接进入老年代）
    1.3：长期存活的对象将进入老年代(应该是在Eden区中存活15次后进入老年代，在jdk8中测试，-XX:MaxTenuringThreshold=1
         的阈值设定根本没用)
    1.4：动态对象年龄判断（虚拟机不会永远的要求对象的年龄都必须达到MaxTenuringThreshold才能晋升老年代，如果Survivor
         空间中相同年龄的所有对象的大小总和大于Survivor的一半，年龄大于或等于该年龄的对象就可以直接进入老年代）
    1.5：空间分配担保
    1.6：只要老年代的连续空间大于(新生代所有对象的总大小或者历次晋升的平均大小)就会进行minor GC,否则会进行full GC

    注：Minor-GC：发生在新生代回收过程中。Major-GC：当新生代回收不能把对象放进老年代中，就会触发一次完全收集(major-gc)
        Major GC 是清理老年代。Full GC 是清理整个堆空间—包括新生代和老年代，但实际上这两者一般默认为统一概念


二：gc的触发条件
    2.1：System.gc()方法的调用。此方法的调用建议jvm进行 full gc,能不使用就别使用，让虚拟机自己管理内存。可通过：
         -XX:+DisableExplicitGC 来禁止 RMI(java远程方法调用)调用 System.gc();
    2.2：新对象创建的时候内存不足，导致 Minor GC，也就是 Eden区内存不足，survivor区不会导致gc触发
    2.3：老年代内存不足会导致 Full gc
    2.4：方法区(永久代)内存不足会导致 Full gc ，jdk 8 不会出现此问题，改为了元空间，使用本地内存。

