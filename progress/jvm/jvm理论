JVM知识（一）

java三大流：数据流、控制流、指令流
线程是执行程序的最小单元，一个线程中也有这些东西。

java 运行时数据区（jvm在执行程序过程中会把它所管理的内存划分为若干个不同的数据区域）：
    1.程序计数器
        程序计数器是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。字节码解释
        器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转。异常处理、
        线程恢复等基础功能都依赖这个计数器来完成。（也就是说在线程进行上下文切换这个过程的状态保存都是计
        数器来管理的，上下文：当线程从挂起到下一次的重新执行这个过程）由于java虚拟机的多线程是通过线程轮
        流切换并分配处理器执行时间的方式来实现的，以任何一个确定的时刻，一个处理器，只会执行一条线程中的
        指令。为了线程切换后能恢复到正确的执行位置，每个线程都会与一个独立的程序计数器。各个之间不影响，

      如果线程正在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址。
        指向当前线程正在执行的字节码指令地址。如果此时从一个线程转为执行另一个线程，此时就会中
        断，当重新执行该线程后，就通过读取该计数器获得接下来执行的地址来执行。
        总结：为线程私有的内存。

    2.栈（包括虚拟机栈以及本地方法栈）：指当前线程运行方法所需要的数据、指令、返回地址
        执行方法需要知道：methodOne :局部变量表、操作数栈、动态链接、出口

        java虚拟机栈也是线程私有的，生命周期和线程相同，虚拟机栈描述的是java方法执行的内存模型：
        每个方法被执行的时候都会同时创建一个栈帧用于存储局部变量表、操作栈、动态链接、方法出口等信息。
        每个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。
        所谓的栈说的就是虚拟机栈中的局部变量表部分，局部变量表存放了编译期可知的各种基本数据类型（8种）、
        对象引用类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，
        也可能指向一个代表对象的句柄或者其他与此对象相关的位置
        java虚拟机规范中，对于这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，
        将抛出stackOverflowError异常，如果虚拟机可以动态拓展，当拓展时无法申请到足够的内存时会抛出
        OutOfMemoryError异常

        栈（FILO、xss(深度也就是大小)）栈帧（出栈入栈单元，也可认为是数据大小）
        操作数栈：寄存器（存放中间结果）
        如：int sum = i+j;此时先压栈 i 和 j 然后出栈，计算后存储sum放到操作数栈中

        虚拟机栈为虚拟机执行java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的native方法服务


    3.java堆：
        java堆（java heap）是java虚拟机所管理的内存中最大的一块，java堆是被所有线程共享的一块内存区域，
        在虚拟机启动时创建。此内存区域唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内
        存。
        这一点在java虚拟机规范中的描述是：
            所有的对象实例以及数组都要在堆上分配，java堆是垃圾收集器管理的主要区域，因此很多时候也被称作
            “GC堆”，如果从内存回收的角度看，由于现在的垃圾收集器基本都是采用的分代收集算法。所以java堆
            中还可以细分为：新生代和老年代。再细致一点的有Eden空间、From Survivor空间，To Survivor空间
            等。无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好的回收内存，或者更快的分
            配内存。


    4.方法区（permgen space）也叫永久代：
        同heap一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息，常量。静态变量、
        即时编译器编译后的代码等数据（其实就是用于加载class类信息的地方），又叫做NON-HEAP(非堆)，
        重点：该概念据说在1.8版本已经没了，因此不会报permgen space的错误了，1.8以后由元数据+heap完成以前
        方法区的存储。

        运行时常量池：
            是方法区的一部分，Class文件中除了有类的版本，字段，方法，接口等描述信息，还有一项是常量池，
            用于存放编译期生成的各种字面量和符号引用，这部分内容在类加载后存放到方法区的运行时常量池中
           重点区别：
                虚拟机栈和方法区里的池：
                    栈中的是局部变量池，存放方法内部的变量，而方法区里面由于是加载的类，因此是存放常量池
                    ，这两者是不同的。同时栈是线程私有，只有本线程可以访问，而方法区里的是公共的访问区，
                    这也说明了为什么controller的成员变量是会受到并发影响而局部变量无所谓.

 二：对象访问
      Object obj = new Object();
    方法体出现此代码，那“Object obj”这部分的语义将会反应到java栈的本地变量表中，作为一个reference
      类型数据出现，而new object（）这部分的语义将会反映到java堆中，形成一块存储了Object类型所有实例数据
      值（Instance Data，对象中各个实例字段的数据）的结构化内存，这块内存的长度是不固定的，另外，在java
      堆中还必须包含能查找到此对象类型数据（如对象数据类型、父类、实现的接口、方法等）的地址信息，这些类
      型数据则存储在方法区中(类型数据存储在方法区应该就是用于调用时查找对应的实例做准备)
   由于reference类型在java虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该使用那种方
      式去定位（对象），
      主流的访问方式有两种：
        1.使用句柄访问方式，java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄
           地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息。（一个对象应该分为具体数据展示
           以及该数据所对应的类型结构）
            见图：通过句柄访问对象.png

         2.使用直接指针访问方式。
            见图：使用直接指针访问对象.png

    总结：使用句柄池最大好处就是reference中存储的是稳定的句柄地址



