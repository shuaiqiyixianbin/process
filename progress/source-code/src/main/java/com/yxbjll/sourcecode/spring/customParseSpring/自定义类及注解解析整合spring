明义：
    基于spring可拓展Schema提供自定义配置支持（spring配置文件中，配置标签支持）
    类似于dubbo的 <dubbo:service />类型的注解,通过解析之后整合进行spring

    完成一个自定义配置一般需要以下步骤：
         设计配置属性和 JavaBean
         编写 XSD 文件
         编写 NamespaceHandler 和 BeanDefinitionParser 完成解析工作
         编写 spring.handlers 和 spring.schemas 串联起所有部件
         在 Bean 文件中应用

    一：案例：
        1）设计配置属性和 JavaBean
            首先当然得设计好配置项，并通过 JavaBean 来建模，本例中需要配置 People 实体，配置属性 name 和 age（id 是默认需要的）
            public class People {
                private String id;
                private String name;
                private Integer age;
            }

        2）编写 XSD 文件 (详见 custom.xsd)
            为上一步设计好的配置项编写 XSD 文件，XSD 是 schema 的定义文件，配置的输入和解析输出都是以 XSD 为契约，本例中 XSD 如下：
            <?xml version="1.0" encoding="UTF-8"?>
            <xsd:schema
                xmlns="http://blog.csdn.net/cutesource/schema/people"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:beans="http://www.springframework.org/schema/beans"
                targetNamespace="http://blog.csdn.net/cutesource/schema/people"
                elementFormDefault="qualified"
                attributeFormDefault="unqualified">
                <xsd:import namespace="http://www.springframework.org/schema/beans" />
                <xsd:element name="people">
                <xsd:complexType> <xsd:complexContent> <xsd:extension base="beans:identifiedType">
                <xsd:attribute name="name" type="xsd:string" />
                <xsd:attribute name="age" type="xsd:int" />
                </xsd:extension>
                </xsd:complexContent>
                </xsd:complexType>
                </xsd:element>
            </xsd:schema>

            关 于 xsd:schema 的 各 个 属 性 具 体 含 义 就 不 作 过 多 解 释 ， 可 以 参 见
            http://www.w3school.com.cn/schema/schema_schema.asp；
            <xsd:element name="people">对应着配置项节点的名称，因此在应用中会用 people 作为
            节点名来引用这个配置
            <xsd:attribute name="name" type="xsd:string" /> 和 <xsd:attribute name="age"
            type="xsd:int" />对应着配置项 people 的两个属性名，因此在应用中可以配置 name 和
            age 两个属性，分别是 string 和 int 类型
            完成后需把 xsd 存放在 classpath 下，一般都放在 META-INF 目录下（本例就放在这个目
            录下）

        3）编写 NamespaceHandler 和 BeanDefinitionParser 完成解析工作
            下面需要完成解析工作，会用到 NamespaceHandler 和 BeanDefinitionParser 这两个概念。
            具体说来 NamespaceHandler 会根据 schema 和节点名找到某个 BeanDefinitionParser，然后由
            BeanDefinitionParser 完成具体的解析工作。因此需要分别完成 NamespaceHandler 和
            BeanDefinitionParser 的实现类，Spring 提供了默认实现类 NamespaceHandlerSupport 和
            AbstractSingleBeanDefinitionParser，简单的方式就是去继承这两个类。本例就是采取这种方
            式：
                import org.springframework.beans.factory.xml.NamespaceHandlerSupport;
                public class MyNamespaceHandler extends NamespaceHandlerSupport {
                public void init() {
                registerBeanDefinitionParser("people", new PeopleBeanDefinitionParser());
                } }

            其中 registerBeanDefinitionParser("people", new PeopleBeanDefinitionParser());
            就是用来把节点名和解析类联系起来，在配置中引用 people 配置项时,就会用
            PeopleBeanDefinitionParser 来解析配置。
            PeopleBeanDefinitionParser 就是本例中的解析类：
                import org.springframework.beans.factory.support.BeanDefinitionBuilder;
                import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;
                import org.springframework.util.StringUtils;
                import org.w3c.dom.Element;
                public class PeopleBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {
                protected Class getBeanClass(Element element) {
                return People.class; }
                protected void doParse(Element element, BeanDefinitionBuilder bean) {
                String name = element.getAttribute("name");
                String age = element.getAttribute("age");
                String id = element.getAttribute("id");
                if (StringUtils.hasText(id)) {
                bean.addPropertyValue("id", id);
                }
                if (StringUtils.hasText(name)) {
                bean.addPropertyValue("name", name);
                }
                if (StringUtils.hasText(age)) {
                bean.addPropertyValue("age", Integer.valueOf(age));
                } } }
            其中 element.getAttribute 就是用配置中取得属性值，bean.addPropertyValue 就是把属性
            值放到 bean 中。


        4）编写 spring.handlers 和 spring.schemas 串联起所有部件
            上面几个步骤走下来会发现开发好的 handler 与 xsd 还没法让应用感知到，就这样放上
            去是没法把前面做的工作纳入体系中的，spring 提供了 spring.handlers 和 spring.schemas 这
            两个配置文件来完成这项工作，这两个文件需要我们自己编写并放入 META-INF 文件夹中，
            这两个文件的地址必须是 META-INF/spring.handlers 和 META-INF/spring.schemas，spring 会默
            认去载入它们，本例中 spring.handlers 如下所示：
            http\://blog.csdn.net/cutesource/schema/people=study.schemaExt.MyNamespaceHandler
            以上表示当使用到名为"http://blog.csdn.net/cutesource/schema/people"的 schema 引用时，
            会通过 study.schemaExt.MyNamespaceHandler 来完成解析
            spring.schemas 如下所示：
            http\://blog.csdn.net/cutesource/schema/people.xsd=META-INF/people.xsd

        总结：自定义注解整合spring基本功能完成，可以利用此功能拓展外部插件，实现整合spring功能(类似dubbo)。
              最主要是 spring.handlers、spring.schemas 两个文件以及 custon.xsd

              http://blog.csdn.net/custom/schema/people  以及 http://blog.csdn.net/custom/schema/people.xsd
              不需要真实地址，只是一个类似别名的东西，只要指向的地址无误即可

              dubbo也是通过自定义注解实现，但是dubbo所有的标签都会有一个对应的config配置。如 provider ：
              有 providerConfig , protocal 有 protocalConfig 而且都是通过同一个 DubboNamespaceHandler
              去解析。传入如 providerConfig.class 来进行特定解析
