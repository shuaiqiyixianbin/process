一：BeanFactory容器的设计原理
    1.1：介绍
        BeanFactory接口提供了使用 Ioc容器的规范，以 XmlBeanFactory为例说明
        一个简单IOC容器系列最底层实现的 XmlBeanFactory 特点:只提供最基本的Ioc容器的功能。可以认为直接的
        BeanFactory实现是Ioc容器的基本形式。各种 ApplicationContext 的实现是 Ioc容器的高级表现形式。

        在spring中，实际上是把 DefaultListableBeanFactory 作为一个默认的功能完整的 IOC 容器来使用
        XmlBeanFactory 继承 DefaultListableBeanFactory 容器功能的同时，增加了新的功能。它是一个可以读取
        以 XML 文件方式定义的 BeanDefinition 的 IOC 容器

        XmlBeanFactory如何实现：
            在 XmlBeanFactory 中，初始化了一个 XmlBeanDefinitionReader 来完成，有了这个对象，可以对
            XML形式的信息进行处理

            构造 XmlBeanFactory 这个 Ioc 容器时，需要指定 BeanDefinition 的信息来源。这个信息来源需要、
            封装成Spring中的 Resource 类来给出。Resource 是 spring用来封装 I/0操作的类。比如：BeanDefinition
            是以 XML 文件形式存在的，可以使用
            ClassPath-Resource res = new ClassPathResource("beans.xml");
            这样具体的ClassPathResource 来构造需要的 Resource,然后将 Resource作为构造参数传递给
            XmlBeanFactory构造函数。这样 Ioc容器就可以方便的定位到需要的 BeanDefinition 信息来对Bean完成
            容器的初始化和依赖注入过程。

            XmlBeanFactory的功能是建立在 DefaultListableBeanFactory 这个基本容器的基础上，并在这个基本容器
            上实现了诸如 XML 读取的附加操作。

            在 XmlBeanFactory 构造方法中需要得到 Resource 对象，对 XmlBeanDefinitionReader对象的初始化，
            以及使用这个对象来完成对 loadBeanDefinitions的调用（26页）

            public XmlBeanFactory(Resource resource, BeanFactory parentBeanFactory) throws BeansException {
                super(parentBeanFactory);
                this.reader.loadBeanDefinitions(resource);
            }

    1.2：深入
        ApplicationContext实现原理和XmlBeanFactory一样，都是通过持有或者拓展DefaultListableBeanFactory来获取
        基本的Ioc容器的功能
        编程式 Ioc 容器：

        ClassPathResource res = new ClassPathResource("beans.xml");
        DefaultListableBeanFactory factory = new DefaultListableBeanFactory();
        XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(factory);
        reader.loadBeanDefinitions(res);
        这样就可以通过factory对象来使用 DefaultListableBeanFactory这个ioc容器了

        第四步：从定义好的资源位置读入配置信息，具体解析由 XmlBeanDefinitionReader
        来完成，完成整个载入和注册Bean定义之后，需要的ioc容器就建立起来了。可以直接使用ioc容器了

    1.3：ApplicationContext 容器的设计原理
        以常用的 FileSystemXmlApplicationContext 的实现来说明 act 的设计原理,其实现：

        public FileSystemXmlApplicationContext(
        			String[] configLocations, boolean refresh, @Nullable ApplicationContext parent)
        			throws BeansException {

        		super(parent);
        		setConfigLocations(configLocations);
        		if (refresh) {
        			refresh();
        		}
        }

        这个 refresh() 过程涉及 ioc 容器启动的一系列复杂操作。对于不同容器，操作类似。因此在基类中实现

        关于 FileSystemXmlApplicationContext 资源定位：
        protected Resource getResourceByPath(String path) {
            if (path.startsWith("/")) {
                path = path.substring(1);
            }
            return new FileSystemResource(path);
        }

        此功能为在文件系统中读取以 xml 形式存在的 BeanDefinition 做准备，因为不同的应用上下文实现对应着
        不同的读取 BeanDefinition 的方式。

    1.4:Ioc 容器初始化过程
        ioc容器的初始化是由前面介绍的 refresh() 方法来启动的。标志 ioc容器的正式启动。包括：BeanDefinition的
        Resource定位、载入和注册三个基本过程

        1.4.1:Resource定位过程
            Resource定位指的是 BeanDefinition 的资源定位，它由 ResourceLoader 通过统一的 Resource 接口来完成。
            这个Resource对各种形式的 BeanDefinition 的使用都提供了统一接口。

        1.4.2:BeanDefinition的载入
            载入过程是把用户定义好的Bean表示成 ioc容器内部的数据结构，容器内部的数据结构就是 BeanDefinition

        1.4.3:向 ioc容器注册 BeanDefinition
            这个过程调用 BeanDefinitionRegistry 接口的实现完成。注册过程把载入过程中解析得到的 BeanDefinition
            向ioc容器进行注册。在ioc容器内部将 BeanDefinition 注入到一个 HashMap中，ioc就是通过这个HashMap
            来持有这些 BeanDefinition数据的

        1.4.4:BeanDefinition的Resource 定位
            编程方式使用 DefaultListableBeanFactory,首先定义一个 Resource来定位容器使用的 BeanDefinition.这时
            使用的是 ClassPathResource,这意味着spring会在类路径中去寻找以文件形式存在的 BeanDefinition 信息

                ClassPathResource  res = new ClassPathResource("beans.xml");

            这里的 Resource 不能由 DefaultListableBeanFactory直接使用，Spring 通过 BeanDefinitionReader来对
            这些信息进行处理。
            注意：
                在这里可以看到使用 ApplicationContext 相对于直接使用 DefaultListableBeanFactory的好处。在
                ApplicationContext中，Spring已经为我们提供了一系列加载不同 Resource 的读取器的实现。而
                DefaultListableBeanFactory 只是一个纯粹的 ioc容器。需要为其配置特定的读取器才能完成这些功能。


二：Context的初始化操作：refresh()
    2.1: 存储 BeanFactory 的类：
        AbstractRefreshableApplicationContext，在其中 ：DefaultListableBeanFactory beanFactory
        以此 BeanFactory 作为全局的 beanFactory 进行处理

        注：BeanPostProcessor 存放在 AbstractApplicationContext 中.处理过程是在 beanFactory中
            获取对象的时候，此时会创建bean createBean ，然后就会调用 beanBefore 以及 beanAfter方法

        总体 refresh()：
        public void refresh() throws BeansException, IllegalStateException {
        		synchronized (this.startupShutdownMonitor) {
        			//准备刷新 初始化所有的placeholder ,并对其进行required校验。清空所有的监听器
        			prepareRefresh();

        			//通知子类去刷新内部容器  refreshBeanFactory();
        			//判断是否有beanFactory，有的话 清空singleBean以及其依赖。并且清空beanFactroy
        			//同时生成一个默认的beanFactory,并利用 loadBeanDefinitions(beanFactory)操作，加载
        			//这个时候的容器已经是一个基本成型的容器了

        			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

        			// Prepare the bean factory for use in this context.
        			prepareBeanFactory(beanFactory);

        			try {
        				//对bean做各种处理，并处理一些 postProcess,放到容器中。
        				postProcessBeanFactory(beanFactory);

        				// Invoke factory processors registered as beans in the context.
        				invokeBeanFactoryPostProcessors(beanFactory);

        				// Register bean processors that intercept bean creation.
        				registerBeanPostProcessors(beanFactory);

        				// Initialize message source for this context.
        				initMessageSource();

        				// Initialize event multicaster for this context.
        				initApplicationEventMulticaster();

        				// Initialize other special beans in specific context subclasses.
        				onRefresh();

        				// Check for listener beans and register them.
        				registerListeners();

        				// Instantiate all remaining (non-lazy-init) singletons.
        				finishBeanFactoryInitialization(beanFactory);

        				// Last step: publish corresponding event.
        				finishRefresh();
        			}

        			catch (BeansException ex) {
        				if (logger.isWarnEnabled()) {
        					logger.warn("Exception encountered during context initialization - " +
        							"cancelling refresh attempt: " + ex);
        				}

        				// Destroy already created singletons to avoid dangling resources.
        				destroyBeans();

        				// Reset 'active' flag.
        				cancelRefresh(ex);

        				// Propagate exception to caller.
        				throw ex;
        			}

        			finally {
        				// Reset common introspection caches in Spring's core, since we
        				// might not ever need metadata for singleton beans anymore...
        				resetCommonCaches();
        			}
        		}
        	}



        //刷新beanFactory
        AbstractRefreshableApplicationContext 类中：

        protected final void refreshBeanFactory() throws BeansException {
        		if (hasBeanFactory()) {
        			//会把本身的bean以及 dependentBean：依赖的bean都删掉 remove();
        			destroyBeans();
        			//关闭beanFactory  setSerializationId = null   setBeanFactory = null; 强制清空
        			closeBeanFactory();
        		}
        		try {
        		    //通过判断是否为 ConfigurableBeanFactory ，是的话获取其父类的 beanFactory，获取当前类的父类：context 实现了 BeanFactory
                    //并新生成 一个 DefaultListableBeanFactory 并设置到 AbstractBeanFactory 的 parentBeanFactory 属性中
        			DefaultListableBeanFactory beanFactory = createBeanFactory();
        			beanFactory.setSerializationId(getId());

        			customizeBeanFactory(beanFactory);
        			//将 beanDefinition 进行解析，并存放到 beanFactory
        			loadBeanDefinitions(beanFactory);

        			synchronized (this.beanFactoryMonitor) {
        				this.beanFactory = beanFactory;
        			}
        		}
        		catch (IOException ex) {
        			throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex);
        		}
        	}









