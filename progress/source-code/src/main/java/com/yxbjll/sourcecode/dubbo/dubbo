                                    dubbo源码记录，与 DubboCode.java 同步
一:shutdownHook事件钩子
    1.1：事件钩子 shutdownHook 是用于在 jvm 退出的时候执行的事件。可以认为程序退出是需要进行的操作
      该事件因为是在jvm退出时候操作，预留时间不会太久，因此 shutdownHook事件应该是不太耗时的
      方法：testShutDownHook()
      注意：1>正常情况程序结束或者程序异常导致jvm退出，都会调用该方法

    1.2：定时延迟任务以及线程池的创建标准
        private static final ScheduledExecutorService DELAY_EXPORT_EXECUTOR = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory("DubboServiceDelayExporter", true));
         //是否延迟注册
            if (shouldDelay()) {
                DELAY_EXPORT_EXECUTOR.schedule(this::doExport, getDelay(), TimeUnit.MILLISECONDS);
            } else {
                doExport();
            }

    1.3：






二：dubbo启动过程分析
    2.1：解析自定义 dubbo schema 标签，将xml中的属性封装成对应的对象，并保存到 ServiceConfig 中
    2.2：ServiceBean-->afterPropertiesSet() 对context中所有的属性类及其子类如：ApplicationConfig、
         ProtocolConfig进行获取，然后封装到 AbstractInterfaceConfig 中，在当前类 注入 context的时候
         onApplicationEvent(),执行提供方注册操作 export();
    2.3：export() --> doExport() --> doExportUrls()方法，此时会进行一些参数解析和封装，通过前期的
         注解解析出来，然后进行一系列初始值赋予(没有设置对应值的属性)，如果获取不到 注册服务的ip和端口，
         默认使用当前服务器ip 与 默认的 20880 端口,最后封装成一个url
         如：
            String host = this.findConfigedHosts(protocolConfig, registryURLs, map);
            Integer port = this.findConfigedPorts(protocolConfig, name, map);
            //组装url
            URL url = new URL(name, host, port, getContextPath(protocolConfig).map(p -
         具体数据；
            url = dubbo://192.168.0.102:20880/org.apache.dubbo.demo.DemoService?anyhost=true
                  &application=demo-provider&bean.name=org.apache.dubbo.demo.DemoService
                  &bind.ip=192.168.0.102&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true
                  &generic=false&interface=org.apache.dubbo.demo.DemoService&methods=sayHello
                  &pid=14616&qos.port=22222&release=&side=provider&timestamp=1586272189539
    2.4：获取封装后的 url 后，拿着这个url去开启server请求。


    注：zookeeper中dubbo结构：ls /dubbo/org.apache.dubbo.demo.DemoService/providers 里面会存放 provider的信息
        信息是临时节点，客户端断开连接后会自动删除数据