http://www.runoob.com/design-pattern/design-pattern-intro.html

一：设计模式的类型：创建型、结构型、行为型
    1.1：创建型：该设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用new运算符直接实例化
         对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。包括：
      工厂模式、抽象工厂模式、单例模式、建造者模式、原型模式。

    1.2:结构型：这些设计模式关注类和对象的组合。继承的概念用来组合接口和定义组合对象获得新功能的方式。
      适配器模式、桥接模式、过滤器模式、组合模式、装饰器模式、外观模式、享元模式、代理模式。

   1.3：行为型：这些设计模式特别关注对象之间的通信。
      责任链模式、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、空对象模式、策略模式、模板模式、访问者模式。

二：设计模式的六大原则：

    1、开闭原则（Open Close Principle）
       开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。

    2、里氏代换原则（Liskov Substitution Principle）
       里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。

    3、依赖倒转原则（Dependence Inversion Principle）
       这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。

    4、接口隔离原则（Interface Segregation Principle）
       这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。

    5、迪米特法则，又称最少知道原则（Demeter Principle）
       最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。

    6、合成复用原则（Composite Reuse Principle）
       合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。



三：模式详情：
    3.1: 工厂模式：工厂模式最核心的地方就是多各类实现同一个接口，这样通过多态（在工厂中通过类型判断该生成对应的对象）然后调用该类实现的方法进行对象的创建。
    public class Square implements Shape {
      public void draw() {
      System.out.println("Inside Square::draw() method.");
    } }

    Circle.java
    public class Circle implements Shape {
        public void draw() {
       System.out.println("Inside Circle::draw() method."); }
    }

工厂类：生产具体的对象的工厂：
public class ShapeFactory {
//使用 getShape 方法获取形状类型的对象
   public Shape getShape(String shapeType){
      if(shapeType == null){ return null;
         }
      if(shapeType.equalsIgnoreCase("CIRCLE"))
              { return new Circle(); }
      else if(shapeType.equalsIgnoreCase("RECTANGLE"))
                  { return new Rectangle(); }
      else if(shapeType.equalsIgnoreCase("SQUARE"))
                { return new Square(); } return null; }
  }

  理解：多个类继承同一个接口，然后工厂里面返回了该接口的实现类。
     
3.2:抽象工厂模式：
    是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。它提供了一种创建对象的最佳方式。系统
    的产品有多于一个的产品族（多个不同的类型），而系统只消费其中某一族的产品

    优点：
        当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。
   缺点：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面
        加代码。

   核心代码：抽象类（获取工厂）：
          public abstract class AbstractFactory {
            public abstract Color getColor(String color);
           public abstract Shape getShape(String shape) ;
          }           

  工厂生产类（用于生成工厂）

    public class FactoryProducer {
        public static AbstractFactory getFactory(String choice){
            if(choice.equalsIgnoreCase("SHAPE")){
                return new ShapeFactory();
            } else if(choice.equalsIgnoreCase("COLOR")){
                return new ColorFactory();
            }
            return null;
        }
    }

执行类（main方法）：

  
    public class AbstractFactoryPatternDemo {
        public static void main(String[] args) {
            //获取形状工厂
            AbstractFactory shapeFactory = FactoryProducer.getFactory("SHAPE");
            //获取形状为 Circle 的对象
            Shape shape1 = shapeFactory.getShape("CIRCLE");
            //调用 Circle 的 draw 方法
            shape1.draw();
            AbstractFactory colorFactory = FactoryProducer.getFactory("COLOR");
            //获取颜色为 Red 的对象
            Color color1 = colorFactory.getColor("RED");
        }
    }

  解析：抽象工厂里面包含了两个或多个父类型的类，然后单个工厂继承该抽象类，因此含有生产多个父类型的方法，然后选择性忽略与自身类型无关的方法，只留下本身类型的构造方法工厂如：

    public class ColorFactory extends AbstractFactory {

        @Override
        public Shape getShape(String shapeType){
            return null;
        }

        @Override
        public Color getColor(String color) {
            if(color == null){
                return null;
            }
            if(color.equalsIgnoreCase("RED")){
                return new Red();
            } else if(color.equalsIgnoreCase("GREEN")){
                return new Green();
            } else if(color.equalsIgnoreCase("BLUE")){
                return new Blue();
            }
            return null;
        }
    }

   因此每次只能实例化一种类型，不能两种或者多种类型同时实现，相对于工厂模式来说，抽象工厂模式就是在工厂
   模式的基础上，进行了一点封装，把多个不相同类型的类封装到一起，但是子工厂本质上还是生产具体类型的类。
   最主要的区别就是抽象类工厂可以放多个抽象父类，而工厂方法只能放一种具体的抽象父类。

3.3 原型模式：
        是用于创建重复的对象，同时又能保证性能，该模式实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式，例如：一个对象需要在高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求返回返回它的克隆，在需要的时候更新数据库，以此来减少数据库的调用。
   意图：
        用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。主要解决：在运行期建立和删除原型。何时使用。
   总结：
        使用原型模式，可以看作是new 对象的一个变种，new是通过实例化来构造对象。而原型模式是通过拷贝一个现有的对象生成新对象。浅拷贝实现Cloneable,重写，深拷贝是通过实现Serializable读取二进制流
     
    核心代码：clone = super.clone();
   
    案例：shapeMap里面装了各种 Shape的实现类
      Shape cachedShape = shapeMap.get(shapeId);
      return (Shape) cachedShape.clone();//此处返回 clone对象。

          

