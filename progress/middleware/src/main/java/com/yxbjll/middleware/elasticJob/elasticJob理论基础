一：简介
    elasticJob是一个分布式调度任务，用于将任务分片。如果不能整除，如果分片不能整除,则不能整除的多余分片将依次追加
    到序号小的服务器.
     如: 
     1. 如果有3台服务器, 分成9片, 则每台服务器分到的分片是: 1=[0,1,2], 2=[3,4,5], 3=[6,7,8].
     2. 如果有3台服务器, 分成8片, 则每台服务器分到的分片是: 1=[0,1,6], 2=[2,3,7], 3=[4,5].
     3. 如果有3台服务器, 分成10片, 则每台服务器分到的分片是: 1=[0,1,2,9], 2=[3,4,5], 3=[6,7,8].

    个人理解：如果是每个服务器分了多个片，如1中，1=[0,1,2] 此时代码里还是可以当做一个个固定下标来执行任务
        如：先是根据 0进行查找数据，然后根据1查找，最后根据2查找，也就是说 shardingItem 一次只是一个下标，
        不会一下子来个列表。

    注意：具体的分片数据与数据处理是需要自己根据 shardingItem的下标来动态计算，获取

    代码参考：
     public static List getShareItems(int shardingItem, int shardingTotalCount, Callback countCall, Callback<LimitParam> resultCall) {
            Long count = (Long) countCall.submit(null);
            long items = count / shardingTotalCount;
            long start = items * shardingItem;
            long end = items * (shardingItem + 1);
            if (items == shardingTotalCount) {
                end++;
            }
            log.info("shardingItem={}, shardingTotalCount={}, start={}, end={}", shardingItem, shardingTotalCount, start, end);
            return (List) resultCall.submit(new LimitParam(start, end));
        }

     使用细节：1.首先可以配置一个分布式监听或者普通监听器。每个job执行前后都有方法进行捕获，进行日志打印或者业务逻辑
                 处理

               2.异常处理器：可以在里面进行异常处理与操作,如：
                    @Slf4j
                    public class ElasticExceptionHandler implements JobExceptionHandler {
                        @Override
                        public void handleException(String jobName, Throwable cause) {
                            log.error("elastic job error,jobName={}, msg={}", jobName, cause);
                        }
                    }


