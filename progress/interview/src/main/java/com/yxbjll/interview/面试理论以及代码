好的面试题目网站：https://blog.csdn.net/sinat_21843047/article/details/80217130

一：算法与编程：

1.1 冒泡算法（bubble sort）

 /**
  * bubbleSort:冒泡排序，核心思想就是从最后一位数字开始一直和前面的进行比较，通过换位一步步实现.(我们反一下，从前到后)
  * @param a
  */
    public static void bubbleSort(int[] a){
        int temp;
        for (int i=0;i<a.length;i++){
            for (int j=0;j<a.length-i-1;j++){
                if (a[j]>a[j+1]){
                    temp = a[j];
                    a[j] = a[j+1];
                    a[j+1] = temp;
                }
            }
        }
        for (int k=0;k<a.length;k++){
            System.out.print(a[k]+",");
        }
    }

1.2 快速排序（数组版）：

    /**
     * 快速排序：通过与某一值进行对比，小的放左边，大的放右边，然后再把小的部分的再选
     * 一个值，继续重复操作
     */
    public static void quickSortOld(int[] arr,int left,int right){
        int f,t;
        int rtemp,ltemp;

        ltemp = left;
        rtemp = right;
        f = arr[(left+right)/2];//分界值
        while (ltemp<rtemp){
            while (arr[ltemp] <f){
                ++ltemp;
            }

            while (arr[rtemp] >f){
                --rtemp;
            }

            if (ltemp<=rtemp){
                t=arr[ltemp];
                arr[ltemp] = arr[rtemp];
                arr[rtemp] = t;
                --rtemp;
                ++ltemp;
            }
            if (ltemp == rtemp){
                ltemp++;
            }

            if (left<rtemp){
                quickSortOld(arr,left,ltemp-1);
            }
            if (ltemp<right){
                quickSortOld(arr,rtemp+1,right);
            }
        }
    }

    1.3 快速排序（quick sort）:集合版

    public static List<Integer> quickSort(List<Integer> arr){
        if (arr == null || arr.size()<=0) return null;
        int index = arr.get(0);
        List<Integer> begin = new ArrayList<>();
        List<Integer> end = new ArrayList<>();
        int choice;
        for(int i=1;i<arr.size();i++){
            choice = arr.get(i);
            if(choice<index){
                begin.add(arr.get(i));
            } else{
                end.add(arr.get(i));
            }
        }

        List<Integer> resultList = null;
        if (begin != null || begin.size()>0){
            resultList = quickSort(begin);
        }
        if(resultList==null || resultList.size()<=0){
            resultList = new ArrayList<>();
        }
        resultList.add(arr.get(0));

        List<Integer> endList = quickSort(end);
        if(endList!=null && endList.size()>0){
            resultList.addAll(endList);
        }
        return resultList;
    }

    1.4 文件读取：

    /**
     * 文件读取拷贝
     */
    public static void fileCopy(String source, String target) throws IOException{
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(source);
            out = new FileOutputStream(target);
            byte[] buffer = new byte[4096];
            int bytesToRead;
            while ((bytesToRead = in.read(buffer)) != -1){
                out.write(buffer,0,bytesToRead);
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            out.close();
            in.close();
        }
    }

    1.5 判断一个文本中某个字符串出现的次数：

    /**
     * 计算某个文本中含有某个字符串的数量
     */
    public static int countWordInFile(String fileName, String word){
        int count = 0;
        FileReader fr = null;
        BufferedReader br = null;
        try {
            fr = new FileReader(fileName);
            br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine())!= null){
                int index = -1;
                while (line.length() > word.length() && (index = line.indexOf(word))>=0){
                    count ++;
                    line = line.substring(index+word.length());
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                br.close();
                fr.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return count;
    }
    1.6 多线程编程：

    private synchronized void inc(){
         commonJ++;
    }

    private synchronized void dec(){
         commonJ--;
    }


     /**
      * increase runnable
      */
    class Inc implements Runnable{
        @Override
        public void run() {
             for (int i=0;i<100;i++){
                 inc();
                 System.out.println("j++");
                 System.out.println(commonJ);
             }
        }
    }


     /**
      * decrease runnable
      */
    class Dec implements Runnable{
         @Override
         public void run() {
             for (int i=0;i<100;i++){
                 dec();
                 System.out.println("j--");
                 System.out.println(commonJ);
             }
         }
     }
    ThreadUtils threadUtils = new ThreadUtils();
     Inc inc = threadUtils.new Inc();
     Dec dec = threadUtils.new Dec();
     for (int i=0;i<2;i++){
         Thread t = new Thread(inc);
         t.start();
         t = new Thread(dec);
         t.start();
     }


二：理论
    1）java基础
    1.1：hashMap和concurrentHashMap以及Collections.synchronizedMap(map)和hashtable;
         hashMap中的链表大小超过八个（大于等于八）时会自动转化为红黑树，当删除小于六（小于等于六）时，重新变为链表。
         根据泊松分布，在负载因子默认为0.75的时候，单个hash槽内元素个数为8的概率小于百万分之一，所以将7作为一个分水岭，
         等于7的时候不转换，大于等于8的时候才进行转换，小于等于6的时候就化为链表。
         思考：为什么默认初始值为什么是16？
              我觉得就是一个经验值，定义16没有很特别的原因，只要是2次幂，其实用 8 和 32 都差不多，用16只是因为作者认为
              16这个初始容量是能符合常用而已。
              
         Collections.synchronizedMap:内部维护了一个Map 对象，还有排斥锁mutex,然后所有的操作，都会加上synchronized锁。相当于代理模式
         hashtable:线程安全，但是效率低，在获取数据的时候，使用了synchronized锁
         hashtable是不允许键或值为null的，但是hashmap的键值都可以为null
         hashtable的空键值没有进行处理，当存放null时会直接报错。而hashmap在进行 hashcode（）方法时，会进行 空指针的判断。
         
         快速失败：在容器遍历过程中，如果在此过程中数据进行了改动（只有增删才会报错，修改不会报错），那么就会在 modCount变量上
                   进行数值的增加，然后抛出 ConcurrentModificationException
                   原因是容器不支持并发操作，一般为util包下
         安全失败：允许容器在遍历过程中进行数据的修改：采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，
                   而是先复制原有集合内容，在拷贝的集合上进行遍历。由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对
                   原集合所作的修改并不能被迭代器检测到，故不会抛 ConcurrentModificationException 异常

         

    2）容器（Spring）
    1.1 spring ioc、di
    Ioc:控制反转。把原先客户端管理 对象生成以及生命周期的权利转交给 Ioc容器管理，这样就不用自己去new
    一个对象，并且管理对象的生命周期长度（把对象设置为null）。在spring中 Ioc容器一般说来就是 Context容器，
    由它来进行对象的生成包括加载、初始化。我们要做的就是从 ioc容器中获取这个bean对象。代码如下：
    首先是bean对象：

    public class Employee {    /** 系统id */
        private int id;    /** 员工编号 */
        private String employeeNo;    /** 员工姓名 */
        private String employeeName;    /** 员工性别 */
        private String sex;    /** 出生日期 */
        private Date birthDay;    /** 部门编号 */
        private String officeNo;    /** 岗位编号 */
        private String postNo;    /** 入职时间 */
        private Date entryTime;    /** 特长 */
        private String speciality;    /** 兴趣爱好 */
        private String hobby;    /** setter and getter */
    }

    传统的方式就是：
    public class TestSpringEmp {    
        public static void main(String[] args) {
        Employee emp = new Employee();
         System.out.println(emp);
     }
    }

    通过ioc容器进行管理后：
    加载spring.xml配置文件
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext("spring.xml");        //2.通过id值获取对象
    Employee emp = (Employee) applicationContext.getBean("emp");
    System.out.println(emp);

    #通过xml配置
    <bean id="emp" class="com.spring.model.Employee">
        <property name="id" value="1"></property>
    </bean>
    这就是所谓的控制反转

    二：Di：依赖注入。也就是注入依赖，某一个类需要其他的类对象帮助完成某一功能。案例：
    比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就
    只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统
    运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象
    之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的
    名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行
    的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。

    如平时开发逻辑层需要注入一个repository类对象，它是一个接口，这个时候就通过反射将它注入相当于当前对象
    的一个属性，然后调用它的方法进行curd,又或者注入其他的serviceDao，使用@autowire进行注入，都是这个原理。
    总结思考：IoC和DI有什么关系呢？其实它们是同一个概念的不同角度描述。如 Di注入一个repository或者
    serviceDao那么此时这个被注入的对象是不是也由 Ioc容器管理它的生命周期呢？因此可以认为 Di就是 Ioc的一个
    变种，本质上还是同样的








三：项目方面：
    sso:
        jwt:通过客户端保存数据，服务器端不会保存会话信息。每个请求都会把客户端数据发送到服务器端
            原则；
                在服务器身份验证之后，生成一个json对象，并将其发送回用户。当前aiplus平台只返回一个token
                由于服务器不保存任何信息，变为无状态，便于拓展
            结构：
                JWT头、有效载荷、签名
                jwt头：存放如type、平台等信息，有效载荷：基础信息，如发布时间、jwt id等
                签名：加密、签名等 secret算法








  
